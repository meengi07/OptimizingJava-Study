# Chapter 1. 성능과 최적화

### 1. 자바 성능 : 잘못된 방법

자바 초창기에는 메서드 디스패치 (dispatch : 메서드 호출에 대한 처리 방식) 성능은 최악이었지만, 최근에는 가상 디스패치 ( 동적 바인딩 ) 성능이 좋아졌고, JVM에서 자동 인라이닝(automatic managed inlining : 메서드 호출에서 직접 코드를 호출해 오버헤드를 줄이는 방법)을 통해 가상 디스패치조차 대부분의 호출부에서 사라지게 됨

우수한 성능 목표를 달성하기 위한 방법들

- 전체 소프트웨어 수명주기의 성능 방법론
- 성능과 연관된 테스트 이론
- 측정, 통계 도구 선정
- (시스템+데이터) 분석 스킬
- 하부 기술과 메커니즘

중요한 원칙

- JVM을 더 빨리 작동시키는 ‘마법의 스위치’ 는 없다.
- 자바를 더 빨리 실행하게 하는 ‘팁, 트릭’은 없다.
- 못 보구 꼭꼭 숨겨둔 ‘비밀 알고리즘’ 같은 것도 없다.

### 2. 자바 성능 개요

자바는 실용적인 언어로 개발 환경이 ‘충분히 빠르다면’ 생산성을 대가로 성능을 희생하는 입장이었으나 최근 핫스팟같은 정교한 JVM의 성숙으로 고성능 컴퓨팅 애플리케이션에도 적합한 수준에 이르렀다.

실용성을 추구하는 자바 플랫폼의 성격 중 서브시스템(managed subsystem)이 대표적인데, 개발자가 일일히 용량을 관리하지 않고 시스템이 관리하도록 하는 것으로 단적으로 메모리 관리가 있다. JVM이 탈착형 GC 서브시스템 형태로 메모리를 자동 관리하는 덕분에 수동으로 메모리를 관리하며 개발할 필요가 없다.

성능 측정은 정규 분포를 따르지 않는 경우가 많아서 기초 통계 기법만 갖고는 결과를 제대로 처리하기 힘들다. 측정 행위 자체도 오버헤드가 일어나며 자주 샘플링하거나 기록하는 것도 성능 결과 수치에 영향을 끼친다.

### 3. 성능은 실험과학이다

JVM 성능 튜닝은 기술, 방법론, 정량적 측정값, 툴을 망라한 개념으로 시스템 소유자/유저가 추구하는 측정 결과를 얻는 것으로 일종의 실험과학이라고 할 수 있다.

- 원하는 결과를 정의한다
- 기존 시스템을 측정한다
- 요건을 충족시키려면 무슨 일을 해야 할지 정한다.
- 개선 활동을 추진한다
- 다시 테스트한다
- 목표가 달성됐는지 판단한다

바람직한 성능 결과를 정의하고 판단하는 과정에서 정량적인 일련의 목표가 수립되며, 무엇을 측정할지 대상을 확정하고 목표를 기록하는 행위가 중요하며 이런 행위들이 프로젝트 아티팩트(결과물)와 제품 일부를 형성한다. 성능 분석은 비기능 요건을 정의하고 달성하는 활동이다.

### 4. 성능 분류

먼저 성능 지표는 통해 성능 분석의 어휘집, 튜닝 프로젝트의 목표를 정량적인 단위로 표현한 기준이다.

- 처리율
    
    서브시스템이 수행 가능한 작업 비율을 나타난 지표, 일정 시간동안 완료한 작업 단위 수로 표시(예: 초당 처리 가능한 트랜잭션 수) 처리율이 실제 성능을 반영하는 의미있는 지표가 되려면 하드웨어 스펙, OS, 소프트웨어 스펙, 서버환경, 트랜잭션이 동일한지 등,  처리율을 테스트할때 실행 간 워크로드가 일정해야함
    
- 지연
    
    하나의 트랜잭션을 처리하고 그 결과를 응답할때까지 걸리는 시간, 종단 시간이라고도 하며, 대개 그래프에서 워크로드에 비례하는 함수로 표시
    
- 용량
    
    시스템이 보유한 작업 병렬성의 총량, 즉 시스템이 동시 처리 가능한 작업 단위 개수를 말하며 처리율과 밀접한 연관이 있고 시스템 동시 부하가 증가할수록 처리율도 영향을 받음
    
- 사용률
    
    가장 흔한 태스크는 시스템 리소스를 효율적으로 활용하는 것, 사용률은 워크로드에 따라 리소스별로 다를 수 있다. 
    
- 효율
    
    처리율을 리소스 사용률로 나눈 값으로 측정하며 같은 처리율을 적은 리소스로 달성한다면 효율이 좋은것이다.
    
- 확장성
    
    처리율이나 시스템 용량은 처리하는 데 쓸 수 있는 리소스에 달려있으며, 리소스 추가에 따른 처리율 변화는 시스템/애플리케이션의 확장성을 가늠하는 척도로 시스템 확장성은 궁극적으로 정확히 리소스를 투입한 만큼 처리율이 변경되는 형태를 지향한다. 
    
- 저하
    
    시스템이 더 많은 부하를 받으면 지연, 처리율 측정값에 변화가 생긴다. 이 변화는 사용률에 따라 달라지는데 시스템을 덜 사용한다면 측정값이 느슨하게 변하지만 시스템이 풀 가동중이면 처리율이 더 늘어나지 않는, 지연이 증가하는 양상을 띄며 이런 현상을 저하(degradation)라고 한다.  
    
- 측정값 사이의 연관 관계
    
    다양한 성능 측정값은 어떤 식으로든 서로 연결돼 있다. 시스템의 부하가 증가하면 사용률도 증가하지만 시스템이 많이 사용되지 않을때는 적은 사용률을 보인다. JIT컴파일러가 좋은 예로, JIT 컴파일 대상이 되는 메서드는 ‘충분히 빈번하게’ 인터프리티드 모드로 실행돼야 하며, 부하에 따라 메서드 호출 빈도가 변하면 컴파일 대상이 변경될 수 있다.
    

### 5. 성능 그래프 읽기

성능 테스트에서 자주 등장하는 패턴들이 있다.

![성능 엘보(performance elbow)](https://prod-files-secure.s3.us-west-2.amazonaws.com/c33ad4ae-a8f9-4641-a108-3ef4e39af7b0/73e01f53-a844-4ed3-9255-f6ffbf783632/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2023-12-28_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.10.00.png)

성능 엘보(performance elbow)

예를 들어 부하가 증가하면서 예기치 않게 저하(지연)가 발생한 그래프를 성능 엘보(performance elbow) 라고 한다. 

![스크린샷 2023-12-28 오후 11.12.16.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c33ad4ae-a8f9-4641-a108-3ef4e39af7b0/5ca31293-a898-46d0-bc99-b928f8823699/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2023-12-28_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.12.16.png)

반대로 클러스터에 장비를 추가함에 따라 거의 선형적으로 처리율이 확장되는 운이 아주 좋은 케이스로 이렇게 환경이 극단적으로 순조로울 때 가능하다.

이 그래프는 암달의 법칙으로 태스크를 처리할 때 프로세서 개수를 늘려도 실행 속도를 최대 어느 정도까지 높일 수 있는지를 나타낸 그래프다.

![스크린샷 2023-12-28 오후 11.12.44.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c33ad4ae-a8f9-4641-a108-3ef4e39af7b0/87c9f12e-7ae5-4bd1-a988-5a1427edbd0a/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2023-12-28_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.12.44.png)

JVM의 GC 서브시스템의 메모리 사용 패턴은 보통 ‘톱니’ 모양을 나타낸다.

![스크린샷 2023-12-28 오후 11.15.27.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c33ad4ae-a8f9-4641-a108-3ef4e39af7b0/e8413946-3981-432f-a2c5-51b6bf1bb19b/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2023-12-28_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.15.27.png)

시스템 리소스가 누수될 때 흔히 나타나는 징후의 그래프
